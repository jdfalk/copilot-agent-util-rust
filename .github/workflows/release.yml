# file: .github/workflows/release.yml
# version: 1.0.0
# guid: 1a2b3c4d-5e6f-7890-abcd-ef1234567890

name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Create archive
        shell: bash
        run: |
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            7z a "copilot-agent-util-${{ matrix.target }}.zip" "./target/${{ matrix.target }}/release/copilot-agent-util.exe"
          else
            tar -czf "copilot-agent-util-${{ matrix.target }}.tar.gz" -C "./target/${{ matrix.target }}/release" copilot-agent-util
          fi

      - name: Generate attestation for binary
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            copilot-agent-util-${{ matrix.target }}.*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: copilot-agent-util-${{ matrix.target }}
          path: copilot-agent-util-${{ matrix.target }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p ./release
          find ./artifacts -type f -name "copilot-agent-util-*" -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Extract release notes
        id: extract-notes
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            # Extract notes for this version from CHANGELOG.md
            VERSION=${GITHUB_REF#refs/tags/v}
            awk "/^## \[?${VERSION}\]?/,/^## \[?[0-9]/" CHANGELOG.md | sed '1d;$d' > release_notes.md
            if [[ ! -s release_notes.md ]]; then
              echo "## Release ${VERSION}" > release_notes.md
              echo "Release notes not found in CHANGELOG.md" >> release_notes.md
            fi
          else
            echo "## Release ${GITHUB_REF#refs/tags/v}" > release_notes.md
            echo "No changelog available" >> release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        id: docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate attestation for image
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.docker.outputs.digest }}
